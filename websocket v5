#ifdef ESP8266
#error "Code nay duoc thiet ke cho ESP32, vui long chon dung board."
#elif defined(ESP32)
#include <WiFi.h>
#include <ESPmDNS.h>
#include <HardwareSerial.h> // Thư viện này cần thiết để sử dụng Serial2
#else
#error "Board khong duoc ho tro."
#endif
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <LiquidCrystal_I2C.h>
#include <ArduinoJson.h>
#include <Arduino.h>

// --- Cấu hình chung ---
const char *AP_SSID="ESP32_KHO_THONG_MINH",*AP_PASSWORD="";
const int LCD_ADDRESS=0x27,LCD_COLS=16,LCD_ROWS=2;
const int LUU_KHO_PIN=12,XUAT_KHO_PIN=13; // LED báo chế độ
const int NUT_ON_VATLY_PIN=25,NUT_OFF_VATLY_PIN=26,NUT_RESET_VATLY_PIN=27; // Nút bấm vật lý

const char *ACTION_LUU_KHO="luu_kho",*ACTION_XUAT_KHO="xuat_kho",*ACTION_LOCATION="location",*ACTION_OFF="off",*ACTION_ON="on",*ACTION_RESET="reset";
const char *SOURCE_PHYSICAL="physical",*SOURCE_WEB="web",*SOURCE_ESP32="esp32",*SOURCE_ARDUINO="arduino",*SOURCE_PYTHON="python"; // Bổ sung SOURCE_PYTHON

#define SERIAL_BAUD_RATE 115200

// --- Khai báo Serial thứ hai cho Arduino ---
// Dùng UART2 (2) cho giao tiếp với Arduino.
// LƯU Ý QUAN TRỌNG: Thay đổi các chân GPIO này cho phù hợp với board ESP32 bạn đang dùng.
// Các chân phổ biến cho UART2:
HardwareSerial SerialToArduino(2); 
const int ARDUINO_RX_PIN_ESP32 = 16; // Chân RX của ESP32 (nối với TX của Arduino)
const int ARDUINO_TX_PIN_ESP32 = 17; // Chân TX của ESP32 (nối với RX của Arduino)

// ==========================================
// Các biến trạng thái hệ thống
// ==========================================
enum SystemMode {MODE_OFF,MODE_ON,MODE_LUU_KHO,MODE_XUAT_KHO,MODE_RESET};
SystemMode currentSystemMode=MODE_OFF;

// Trạng thái cờ nhớ của từng vị trí (true = đã có hàng, false = trống)
bool daVaoA1=false,daVaoA2=false,daVaoB1=false,daVaoB2=false,daVaoC1=false,daVaoC2=false;

// HTML Content (Giữ nguyên)
const char trangHtml[] PROGMEM=R"rawliteral(<!DOCTYPE html><html lang="vi"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1.0"><title>Giao dien Nghien cuu Thiet ke</title><style>*{margin:0;padding:0;box-sizing:border-box;font-family:'Times New Roman',Times,serif}body{background:#f4f4f4;display:flex;justify-content:center;align-items:center;min-height:100vh;padding:20px}.container{max-width:1100px;width:100%;padding:20px;background:#fff;border-radius:10px;box-shadow:0 0 20px rgba(0,0,0,.1)}.header{display:flex;flex-direction:column;align-items:center;margin-bottom:40px;border-bottom:2px solid #003087;padding-bottom:20px;text-align:center}.header-text{text-align:center}.header h1{font-size:28px;color:#003087;text-transform:uppercase;margin-bottom:10px}.header h3{font-size:18px;color:#003087;margin-bottom:5px}.color-primary{color:#003087}.main-content{display:flex;justify-content:space-between;align-items:flex-start;gap:40px;flex-wrap:wrap}.control-panel{width:100%;max-width:450px;margin-bottom:20px;border:2px solid #003087;border-radius:10px;background:#f0f8ff;padding:10px;box-sizing:border-box}.clickable-item{display:flex;justify-content:center;align-items:center;border:2px solid #003087;color:#003087;font-weight:bold;text-align:center;background:#f0f8ff;border-radius:5px;cursor:pointer;transition:background-color .3s,transform .1s;box-shadow:0 2px 5px rgba(0,0,0,.05)}.clickable-item:hover{background:#d0e7ff}.clickable-item:active{transform:scale(.98)}.clickable-item.active{background:#4682b4;color:white}.mode-button{flex:1;padding:12px 15px;font-size:16px}.button-row{display:flex;justify-content:space-between;gap:10px;margin-bottom:10px}.button-row:last-child{margin-bottom:0}.location-cell{width:48%;height:70px;font-size:22px;border:1px solid #003087;background:white}.location-cell:hover{background:#d0e7ff}.location-cell:active{transform:scale(.98)}.location-cell.active{background:#4682b4;color:white}#status-indicator{margin-top:15px;padding:10px;border:1px solid #ccc;border-radius:5px;background:#eee;font-size:14px;text-align:center;color:#333}#status-indicator.connecting{color:#ff9800;border-color:#ff9800}#status-indicator.connected{color:#4caf50;border-color:#4caf50}#status-indicator.disconnected{color:#f44336;border-color:#f44336}#status-indicator.error{color:#f44336;border-color:#f44336;font-weight:bold}#status-indicator.active{color:#2196f3;border-color:#2196f3;font-weight:bold}#status-indicator.idle{color:#607d8b;border-color:#607d8b}#status-indicator.info{color:#009688;border-color:#009688}.text-content{width:100%;max-width:550px;font-size:16px;color:#000;line-height:1.6}.text-row{display:flex;flex-direction:row;margin-bottom:15px;gap:20px;flex-wrap:wrap;align-items:flex-start}.text-row:last-child{margin-bottom:0}.text-column.left{font-weight:bold;color:#003087;flex-basis:200px;flex-shrink:0}.text-column.right{color:#003087;flex-grow:1}.text-column.right p{margin-bottom:3px}.text-column.right p:last-child{margin-bottom:0}@media (max-width:992px){.main-content{flex-direction:column;align-items:center;gap:20px}.control-panel,.text-content{max-width:600px;width:100%}.text-row{flex-direction:column;gap:5px;align-items:center;text-align:center}.text-column.left,.text-column.right{flex-basis:auto;flex-shrink:1;flex-grow:0;width:100%;text-align:center}.text-column.left{margin-bottom:5px}.text-column.right p{text-align:center}}@media (max-width:480px){.header h1{font-size:22px}.header h3{font-size:16px}.mode-button{font-size:14px;padding:10px 12px}.location-cell{font-size:18px;height:60px}.text-content{font-size:14px}}</style></head><body><div class="container"><div class="header"><div class="header-text"><h1>ĐẠI HỌC ĐIỆN LỰC ELECTRIC POWER UNIVERSITY</h1><h3>NGHIÊN CỨU THIẾT KẾ MÔ HÌNH LƯU KHO THÔNG MINH</h3><h3>MÃ SỐ ĐỀ TÀI : DTNH.96/2025</h3></div></div><div class="main-content"><div class="control-panel"><div class="button-row"><div id="btn-on" class="clickable-item mode-button" onclick="sendWsCommand(this)" data-action="on">ON</div><div id="btn-off" class="clickable-item mode-button" onclick="sendWsCommand(this)" data-action="off">OFF</div><div id="btn-reset" class="clickable-item mode-button" onclick="sendWsCommand(this)" data-action="reset">RESET</div></div><div class="button-row"><div id="btn-luu-kho" class="clickable-item mode-button" onclick="sendWsCommand(this)" data-action="luu_kho">LƯU KHO</div><div id="btn-xuat-kho" class="clickable-item mode-button" onclick="sendWsCommand(this)" data-action="xuat_kho">XUẤT KHO</div></div><div class="button-row"><div class="location-cell clickable-item" onclick="sendWsCommand(this)" data-action="location" data-value="C2">C2</div><div class="location-cell clickable-item" onclick="sendWsCommand(this)" data-action="location" data-value="C1">C1</div></div><div class="button-row"><div class="location-cell clickable-item" onclick="sendWsCommand(this)" data-action="location" data-value="B2">B2</div><div class="location-cell clickable-item" onclick="sendWsCommand(this)" data-action="location" data-value="B1">B1</div></div><div class="button-row"><div class="location-cell clickable-item" onclick="sendWsCommand(this)" data-action="location" data-value="A2">A2</div><div class="location-cell clickable-item" onclick="sendWsCommand(this)" data-action="location" data-value="A1">A1</div></div><div id="status-indicator">Trang thai: Dang cho...</div></div><div class="text-content"><div class="text-row"><div class="text-column left"><p class="color-primary">SINH VIÊN THỰC HIỆN</p></div><div class="text-column right color-primary"><p>NGUYỄN MINH TRÍ</p><p>TRẦN KHẮC THÀNH</p><p>NGUYỄN PHAN DUY TÂN</p><p>NGUYỄN TIẾN HẢI</p><p>ĐỖ MINH THẾ</p></div></div><div class="text-row"><div class="text-column left"><p class="color-primary">CHỦ NHIỆM ĐỀ TÀI</p></div><div class="text-column right color-primary"><p>NGUYỄN MINH TRÍ</p></div></div><div class="text-row"><div class="text-column left"><p class="color-primary">GIẢNG VIÊN HƯỚNG DẪN</p></div><div class="text-column right color-primary"><p>TS. ĐOÀN THỊ HƯƠNG GIANG</p></div></div></div></div></div><script>const ACTION_LUU_KHO="luu_kho",ACTION_XUAT_KHO="xuat_kho",ACTION_LOCATION="location",ACTION_OFF="off",ACTION_ON="on",ACTION_RESET="reset";const gateway=`ws://${window.location.hostname}/ws`;let websocket;const statusIndicator=document.getElementById('status-indicator'),btnOn=document.getElementById('btn-on'),btnOff=document.getElementById('btn-off'),btnReset=document.getElementById('btn-reset'),btnLuuKho=document.getElementById('btn-luu-kho'),btnXuatKho=document.getElementById('btn-xuat-kho'),locationCells=document.querySelectorAll('.location-cell[data-action="location"]');let currentBroadcastedAction=null,currentBroadcastedLocation=null;window.addEventListener('load',onLoad);function onLoad(){initWebSocket()}function initWebSocket(){updateStatusIndicator('Connecting to ESP32...','connecting');websocket=new WebSocket(gateway);websocket.onopen=onOpen;websocket.onclose=onClose;websocket.onerror=onError;websocket.onmessage=onMessage}function onMessage(event){try{const data=JSON.parse(event.data);updateUI(data)}catch(e){updateStatusIndicator(`Error data: ${event.data}`,'error')}}function onOpen(event){updateStatusIndicator('Connected','connected')}function onClose(event){updateStatusIndicator('Disconnected. Attempting to reconnect...','disconnected');setTimeout(initWebSocket,2000)}function onError(event){updateStatusIndicator('WebSocket connection error','error')}function updateUI(data){const sourceTextMap={'physical':'(Nut vat ly)','web':'(Web UI)','arduino':'(Arduino Uno)','esp32':'(He thong)','python':'(Python)'};const sourceText=sourceTextMap[data.source]||'(Khong ro)';currentBroadcastedAction=data.action;currentBroadcastedLocation=(data.action==='location')?data.value:null;clearAllActiveStates();let statusMessage=`Action: ${data.action?data.action.toUpperCase():'UNKNOWN'}`,statusClass='info';if(data.action===ACTION_LUU_KHO){setActiveButton(btnLuuKho);statusMessage=`Che do: LUU KHO`;statusClass='active'}else if(data.action===ACTION_XUAT_KHO){setActiveButton(btnXuatKho);statusMessage=`Che do: XUAT KHO`;statusClass='active'}else if(data.action===ACTION_LOCATION&&data.value){setActiveLocation(data.value);statusMessage=`Vi tri: ${data.value}`;statusClass='active'}else if(data.action===ACTION_ON){setActiveButton(btnOn);statusMessage=`Mode: ON`;statusClass='active'}else if(data.action===ACTION_OFF){setActiveButton(btnOff);statusMessage=`Mode: OFF (Da dung)`;statusClass='idle'}else if(data.action===ACTION_RESET){setActiveButton(btnReset);statusMessage=`Mode: RESET`;statusClass='idle';clearAllActiveStates()}else if(data.action==='python_command'){statusMessage=`Lenh tu Python: ${data.value}`;statusClass='info'}else if(data.error){statusMessage=`Loi tu ESP32: ${data.error}`;statusClass='error'}else if(data.status){statusMessage=`Trang thai: ${data.status}`;statusClass='info'}else if(data.action==="location_from_arduino"&&data.value){statusMessage=`Arduino: Hang vao ${data.value}`;statusClass='info'}else if(data.action==="location_cleared_from_arduino"&&data.value){statusMessage=`Arduino: Hang ra ${data.value}`;statusClass='info'}else if(data.action==="arduino_status"&&data.value){statusMessage=`Arduino status: ${data.value}`;statusClass='info'}else if(data.action==="arduino_raw_cmd"&&data.value){statusMessage=`Arduino raw cmd: ${data.value}`;statusClass='info'}else{statusMessage=`Unknown: ${JSON.stringify(data)}`;statusClass='info'}updateStatusIndicator(`${statusMessage} ${sourceText}`,statusClass)}function updateStatusIndicator(message,statusClass){if(statusIndicator){statusIndicator.textContent=`Trang thai: ${message}`;statusIndicator.className='';statusIndicator.classList.add(statusClass)}}function setActiveButton(activeButton){if(activeButton)activeButton.classList.add('active')}function setActiveLocation(locationValue){locationCells.forEach(cell=>{if(cell.dataset.value===locationValue)cell.classList.add('active')})}function clearAllActiveStates(){[btnOn,btnOff,btnReset,btnLuuKho,btnXuatKho].forEach(btn=>btn?.classList.remove('active'));locationCells.forEach(cell=>cell.classList.remove('active'))}function sendWsCommand(element){if(!websocket||websocket.readyState!==WebSocket.OPEN){updateStatusIndicator('Not connected, cannot send command','error');initWebSocket();return}const action=element.dataset.action;let value=element.dataset.value;const message={action:action};if(value!==undefined&&value!==null)message.value=value;websocket.send(JSON.stringify(message))}</script></body></html>)rawliteral";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");
LiquidCrystal_I2C lcd(LCD_ADDRESS, LCD_COLS, LCD_ROWS);
int lastButtonStateON = HIGH, lastButtonStateOFF = HIGH, lastButtonStateRESET = HIGH;


// =========================================================================================
// Di chuyển toàn bộ định nghĩa hàm handleWebSocketEvent lên đây để khắc phục lỗi
// = =======================================================================================
void handleWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{
    switch (type)
    {
    case WS_EVT_CONNECT:
        Serial.printf("Client #%u da ket noi tu %s\n", client->id(), client->remoteIP().toString().c_str()); // Debug
        broadcastStatus("connected", String(client->id()), SOURCE_ESP32);
        break;
    case WS_EVT_DISCONNECT:
        Serial.printf("Client #%u da ngat ket noi\n", client->id()); // Debug
        break;
    case WS_EVT_DATA:
    {
        AwsFrameInfo *info = (AwsFrameInfo *)arg;
        if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT)
        {
            data[len] = 0;
            String jsonStr = (char *)data;
            Serial.printf("Nhan tu Web UI (Client #%u): %s\n", client->id(), jsonStr.c_str()); // Debug
            DynamicJsonDocument doc(256);
            DeserializationError error = deserializeJson(doc, jsonStr);
            if (error)
            {
                updateLCD("Loi JSON!", error.c_str());
                DynamicJsonDocument errorDoc(64);
                errorDoc["error"] = "Invalid JSON";
                String errorJson;
                serializeJson(errorDoc, errorJson);
                client->text(errorJson);
                return;
            }
            const char *action = doc["action"] | "unknown";
            String value = doc["value"].as<String>();
            executeAction(action, value, SOURCE_WEB);
        }
        break;
    }
    case WS_EVT_PONG:
        break;
    case WS_EVT_ERROR:
        Serial.printf("WebSocket Error: %u\n", client->id()); // Debug
        break;
    }
}
// =========================================================================================
// Kết thúc phần di chuyển
// =========================================================================================

// KHAI BÁO NGUYÊN MẪU CÁC HÀM (Nếu định nghĩa hàm nằm sau setup(), thì cần nguyên mẫu ở đây)
// Do handleWebSocketEvent đã được di chuyển lên, không cần khai báo nguyên mẫu ở đây nữa.
void updateLCD(String line1, String line2 = "");
void broadcastStatus(const char *action, String value = "", const char *source = SOURCE_ESP32);
void sendSerialCommand(const char *command);
void executeAction(const char *action, String value = "", const char *source = SOURCE_ESP32);
// void handleWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len); // Không cần dòng này nữa
void checkPhysicalButtonWithoutDebounce(int buttonPin, int &lastButtonState, const char *actionToTrigger);
void setupPins();
void setupLCD();
void setupAP();
void setupWebServer();
void setupSerialPorts();
void checkArduinoInput();
void checkPythonInput(); // <-- HÀM MỚI


// CÁC HÀM DI CHUYỂN KHÔNG ĐỔI
void dichuyenvaoA1() { updateLCD("Luu kho A1", ""); }
void dichuyenvaoA2() { updateLCD("Luu kho A2", ""); }
void dichuyenvaoB1() { updateLCD("Luu kho B1", ""); }
void dichuyenvaoB2() { updateLCD("Luu kho B2", ""); }
void dichuyenvaoC1() { updateLCD("Luu kho C1", ""); }
void dichuyenvaoC2() { updateLCD("Luu kho C2", ""); }
void dichuyenraA1() { updateLCD("Xuat kho A1", ""); }
void dichuyenraA2() { updateLCD("Xuat kho A2", ""); }
void dichuyenraB1() { updateLCD("Xuat kho B1", ""); }
void dichuyenraB2() { updateLCD("Xuat kho B2", ""); }
void dichuyenraC1() { updateLCD("Xuat kho C1", ""); }
void dichuyenraC2() { updateLCD("Xuat kho C2", ""); }

void setup()
{
    setupSerialPorts(); // Quan trọng: Khởi tạo các cổng Serial trước

    Serial.println("\n===================================");
    Serial.println("    KHOI DONG HE THONG LUU KHO     ");
    Serial.println("===================================");
    Serial.println("ESP32 san sang nhan lenh tu Web UI, Nut Bam, Python & Arduino.");
    Serial.print("Giao tiep voi Python qua Serial (USB/COM) @ ");
    Serial.print(SERIAL_BAUD_RATE); Serial.println(" bps");
    Serial.print("Giao tiep voi Arduino Uno qua Serial2 (GPIO" + String(ARDUINO_RX_PIN_ESP32) + "/GPIO" + String(ARDUINO_TX_PIN_ESP32) + ") @ ");
    Serial.print(SERIAL_BAUD_RATE); Serial.println(" bps");
    Serial.println("LUU Y: Vui long su dung cac chan GPIO " + String(ARDUINO_RX_PIN_ESP32) + " (RX2) va " + String(ARDUINO_TX_PIN_ESP32) + " (TX2) de ket noi Arduino.");


    setupLCD();         
    setupPins();        
    setupAP();          
    setupWebServer();   

    if(MDNS.begin("esp32-kho")){
        Serial.println("mDNS responder started: http://esp32-kho.local");
        MDNS.addService("http","tcp",80);
    } else {
        Serial.println("Error setting up mDNS");
    }

    Serial.print("Access Point SSID: "); Serial.println(AP_SSID);
    Serial.print("Web Server IP: "); Serial.println(WiFi.softAPIP());
    updateLCD("AP Mode OK!","IP:"+WiFi.softAPIP().toString().substring(0,15));
    // Đặt trạng thái ban đầu sau khi khởi tạo
    executeAction(ACTION_OFF,"",SOURCE_ESP32);
}

void loop()
{
    ws.cleanupClients();
    checkPhysicalButtonWithoutDebounce(NUT_ON_VATLY_PIN,lastButtonStateON,ACTION_ON);
    checkPhysicalButtonWithoutDebounce(NUT_OFF_VATLY_PIN,lastButtonStateOFF,ACTION_OFF);
    checkPhysicalButtonWithoutDebounce(NUT_RESET_VATLY_PIN,lastButtonStateRESET,ACTION_RESET);
    checkArduinoInput(); // Kiểm tra dữ liệu từ Arduino (qua Serial2)
    checkPythonInput(); // Kiểm tra dữ liệu từ Python (qua Serial - USB/COM)
}

// === CÁC HÀM ĐÃ ĐƯỢC CHỈNH SỬA HOẶC BỔ SUNG ===

// HÀM MỚI: Kiểm tra dữ liệu từ Python và chuyển tiếp tới Arduino
void checkPythonInput()
{
    if (Serial.available()) // Lắng nghe trên cổng Serial mặc định (kết nối với Python)
    {
        String data = Serial.readStringUntil('\n');
        data.trim(); // Xóa khoảng trắng thừa
        if (data.length() > 0)
        {
            Serial.print("Nhan tu Python (COM): '"); // Debug trên Serial Monitor của ESP32
            Serial.print(data); Serial.println("'");
            
            // Kiểm tra nếu dữ liệu là một trong các lệnh hợp lệ
            if (data == "A" || data == "B" || data == "C" || data == "SAI")
            {
                updateLCD("Lenh tu Python:", data);
                SerialToArduino.println(data); // Chỉ gửi "A", "B", "C", "SAI"
                broadcastStatus("python_command", data, SOURCE_PYTHON);
            } else {
                Serial.print("Lenh Python khong hop le: "); // Debug
                Serial.println(data); // Debug
                // Có thể gửi thông báo lỗi về Web UI hoặc LCD nếu muốn
            }
        }
    }
}


// CHỈNH SỬA: Khởi tạo cả 2 cổng Serial
void setupSerialPorts()
{
    // Serial (0) dùng để giao tiếp với Python qua USB (Tx0, Rx0) và debug
    Serial.begin(SERIAL_BAUD_RATE);
    // SerialToArduino (UART2) dùng để giao tiếp với Arduino (Tx2, Rx2)
    // Gán chân GPIO cho UART2 rõ ràng
    SerialToArduino.begin(SERIAL_BAUD_RATE, SERIAL_8N1, ARDUINO_RX_PIN_ESP32, ARDUINO_TX_PIN_ESP32);

    Serial.println("Serial Ports initialized."); // Debug
}

// CHỈNH SỬA: Đọc dữ liệu từ Arduino qua SerialToArduino
void checkArduinoInput()
{
    if (SerialToArduino.available()) // Lắng nghe trên cổng SerialToArduino (UART2)
    {
        String data = SerialToArduino.readStringUntil('\n');
        data.trim();
        if (data.length() > 0)
        {
            Serial.print("Nhan tu Arduino (Serial2): '"); // Debug trên Serial Monitor của ESP32
            Serial.print(data); Serial.println("'");

            if (data.startsWith("ESP32_CMD:")) // Nếu Arduino gửi JSON với tiền tố
            {
                String jsonPart = data.substring(10);
                DynamicJsonDocument doc(256);
                DeserializationError error = deserializeJson(doc, jsonPart);
                if (!error && doc.containsKey("action"))
                {
                    const char *action = doc["action"] | "unknown";
                    String value = doc["value"].as<String>();
                    // Thực hiện hành động hoặc cập nhật trạng thái trên ESP32/Web UI
                    if (strcmp(action, "location") == 0) {
                        // Cập nhật trạng thái daVaoX trên ESP32 dựa vào thông báo từ Arduino
                        if (value == "A1") daVaoA1 = true;
                        else if (value == "A2") daVaoA2 = true;
                        else if (value == "B1") daVaoB1 = true;
                        else if (value == "B2") daVaoB2 = true;
                        else if (value == "C1") daVaoC1 = true;
                        else if (value == "C2") daVaoC2 = true;
                        broadcastStatus("location_from_arduino", value, SOURCE_ARDUINO);
                        updateLCD("Arduino:", "Da luu " + value);
                    } else if (strcmp(action, "location_cleared") == 0) {
                        // Cập nhật trạng thái daVaoX trên ESP32 (đã trống)
                        if (value == "A1") daVaoA1 = false;
                        else if (value == "A2") daVaoA2 = false;
                        else if (value == "B1") daVaoB1 = false;
                        else if (value == "B2") daVaoB2 = false;
                        else if (value == "C1") daVaoC1 = false;
                        else if (value == "C2") daVaoC2 = false;
                        broadcastStatus("location_cleared_from_arduino", value, SOURCE_ARDUINO);
                        updateLCD("Arduino:", "Da xuat " + value);
                    } else if (strcmp(action, "status") == 0) {
                        broadcastStatus("arduino_status", value, SOURCE_ARDUINO);
                        updateLCD("Arduino status:", value);
                    } else {
                        Serial.printf("Arduino gui action khong ro: %s, value: %s\n", action, value.c_str());
                        broadcastStatus("arduino_unknown_action", String(action) + ":" + value, SOURCE_ARDUINO);
                    }
                }
                else
                {
                    Serial.print("Loi phan tich JSON tu Arduino: "); Serial.println(error.c_str());
                    broadcastStatus("error_arduino_json", jsonPart, SOURCE_ARDUINO);
                }
            }
            else // Nếu Arduino gửi chuỗi đơn giản không có tiền tố JSON (thường là debug)
            {
                broadcastStatus("arduino_raw_cmd", data, SOURCE_ARDUINO);
                updateLCD("Arduino raw:", data);
            }
        }
    }
}

// CHỈNH SỬA: Gửi lệnh tới Arduino qua SerialToArduino (UART2)
void sendSerialCommand(const char *command)
{
    Serial.print("Gui lenh toi Arduino (Serial2): "); // Debug trên Serial Monitor của ESP32
    Serial.println(command); // Debug trên Serial Monitor của ESP32
    SerialToArduino.println(command); // Gửi lệnh đến Arduino qua Serial2
}

// === CÁC HÀM CÒN LẠI GIỮ NGUYÊN NHƯ BẢN GỐC (chỉ thêm debug logs) ===

void updateLCD(String line1, String line2)
{
    lcd.clear();
    lcd.setCursor(0, 0);
    String printLine1 = line1.substring(0, min((int)line1.length(), LCD_COLS));
    lcd.print(printLine1);
    if (line2 != "")
    {
        lcd.setCursor(0, 1);
        String printLine2 = line2.substring(0, min((int)line2.length(), LCD_COLS));
        lcd.print(printLine2);
    }
    Serial.printf("LCD: Line 1: '%s', Line 2: '%s'\n", line1.c_str(), line2.c_str()); // Debug
}

void broadcastStatus(const char *action, String value, const char *source)
{
    DynamicJsonDocument doc(256);
    doc["action"] = action;
    if (value != "")
        doc["value"] = value;
    doc["source"] = source;
    doc["currentMode"] = (int)currentSystemMode;
    doc["A1_status"] = daVaoA1;
    doc["A2_status"] = daVaoA2;
    doc["B1_status"] = daVaoB1;
    doc["B2_status"] = daVaoB2;
    doc["C1_status"] = daVaoC1;
    doc["C2_status"] = daVaoC2;
    String jsonString;
    serializeJson(doc, jsonString);
    ws.textAll(jsonString);
    Serial.printf("Broadcasted status: %s\n", jsonString.c_str()); // Debug
}

void executeAction(const char *action, String value, const char *source)
{
    // Debug output to Serial (UART0/USB)
    Serial.printf("Thuc hien Action: '%s', Value: '%s', Nguon: '%s'\n", action, value.c_str(), source);

    if (strcmp(action, ACTION_ON) == 0)
    {
        if (currentSystemMode != MODE_ON)
        {
            currentSystemMode = MODE_ON;
            digitalWrite(LUU_KHO_PIN, LOW);
            digitalWrite(XUAT_KHO_PIN, LOW);
            updateLCD("Mode: ON", source);
            sendSerialCommand("MODE_ON");
            broadcastStatus(ACTION_ON, "", source);
        }
    }
    else if (strcmp(action, ACTION_OFF) == 0)
    {
        if (currentSystemMode != MODE_OFF)
        {
            currentSystemMode = MODE_OFF;
            digitalWrite(LUU_KHO_PIN, LOW);
            digitalWrite(XUAT_KHO_PIN, LOW);
            updateLCD("Mode: OFF", "Da dung");
            sendSerialCommand("MODE_OFF");
            broadcastStatus(ACTION_OFF, "", source);
        }
    }
    else if (strcmp(action, ACTION_RESET) == 0)
    {
        currentSystemMode = MODE_RESET;
        digitalWrite(LUU_KHO_PIN, LOW);
        digitalWrite(XUAT_KHO_PIN, LOW);
        daVaoA1 = daVaoA2 = daVaoB1 = daVaoB2 = daVaoC1 = daVaoC2 = false;
        updateLCD("He thong: RESET", "San sang");
        sendSerialCommand("MODE_RESET");
        currentSystemMode = MODE_OFF;
        broadcastStatus(ACTION_RESET, "", source);
    }
    else if (currentSystemMode == MODE_ON || currentSystemMode == MODE_LUU_KHO || currentSystemMode == MODE_XUAT_KHO)
    {
        if (strcmp(action, ACTION_LUU_KHO) == 0)
        {
            if (currentSystemMode != MODE_LUU_KHO)
            {
                currentSystemMode = MODE_LUU_KHO;
                digitalWrite(LUU_KHO_PIN, HIGH);
                digitalWrite(XUAT_KHO_PIN, LOW);
                updateLCD("Che do: LUU KHO", source);
                sendSerialCommand("MODE_L");
                broadcastStatus(ACTION_LUU_KHO, "", source);
            }
        }
        else if (strcmp(action, ACTION_XUAT_KHO) == 0)
        {
            if (currentSystemMode != MODE_XUAT_KHO)
            {
                currentSystemMode = MODE_XUAT_KHO;
                digitalWrite(XUAT_KHO_PIN, HIGH);
                digitalWrite(LUU_KHO_PIN, LOW);
                updateLCD("Che do: XUAT KHO", source);
                sendSerialCommand("MODE_X");
                broadcastStatus(ACTION_XUAT_KHO, "", source);
            }
        }
        else if (strcmp(action, ACTION_LOCATION) == 0)
        {
            if (value != "")
            {
                if (currentSystemMode == MODE_LUU_KHO)
                {
                    // Các lệnh A, B, C từ Python sẽ được xử lý ở checkPythonInput() và chuyển thẳng đến Arduino
                    // Các lệnh A1, A2, B1, ... từ Web UI sẽ được xử lý ở đây
                    if (value == "A1") {if (!daVaoA1) {dichuyenvaoA1(); daVaoA1 = true; sendSerialCommand("A1"); updateLCD("Da luu:", "A1"); broadcastStatus(ACTION_LOCATION, "A1", source);} else {updateLCD("A1 da day!", ""); broadcastStatus("error", "A1 da day!", source);}}
                    else if (value == "A2") {if (!daVaoA2) {dichuyenvaoA2(); daVaoA2 = true; sendSerialCommand("A2"); updateLCD("Da luu:", "A2"); broadcastStatus(ACTION_LOCATION, "A2", source);} else {updateLCD("A2 da day!", ""); broadcastStatus("error", "A2 da day!", source);}}
                    else if (value == "B1") {if (!daVaoB1) {dichuyenvaoB1(); daVaoB1 = true; sendSerialCommand("B1"); updateLCD("Da luu:", "B1"); broadcastStatus(ACTION_LOCATION, "B1", source);} else {updateLCD("B1 da day!", ""); broadcastStatus("error", "B1 da day!", source);}}
                    else if (value == "B2") {if (!daVaoB2) {dichuyenvaoB2(); daVaoB2 = true; sendSerialCommand("B2"); updateLCD("Da luu:", "B2"); broadcastStatus(ACTION_LOCATION, "B2", source);} else {updateLCD("B2 da day!", ""); broadcastStatus("error", "B2 da day!", source);}}
                    else if (value == "C1") {if (!daVaoC1) {dichuyenvaoC1(); daVaoC1 = true; sendSerialCommand("C1"); updateLCD("Da luu:", "C1"); broadcastStatus(ACTION_LOCATION, "C1", source);} else {updateLCD("C1 da day!", ""); broadcastStatus("error", "C1 da day!", source);}}
                    else if (value == "C2") {if (!daVaoC2) {dichuyenvaoC2(); daVaoC2 = true; sendSerialCommand("C2"); updateLCD("Da luu:", "C2"); broadcastStatus(ACTION_LOCATION, "C2", source);} else {updateLCD("C2 da day!", ""); broadcastStatus("error", "C2 da day!", source);}}
                    else {updateLCD("Loi V.tri luu", value); broadcastStatus("error", "Vi tri luu kho khong hop le", source);}
                }
                else if (currentSystemMode == MODE_XUAT_KHO)
                {
                    if (value == "A1") {if (daVaoA1) {dichuyenraA1(); daVaoA1 = false; sendSerialCommand("A1"); updateLCD("Da xuat:", "A1"); broadcastStatus(ACTION_LOCATION, "A1", source);} else {updateLCD("A1 dang trong", ""); broadcastStatus("error", "A1 dang trong", source);}}
                    else if (value == "A2") {if (daVaoA2) {dichuyenraA2(); daVaoA2 = false; sendSerialCommand("A2"); updateLCD("Da xuat:", "A2"); broadcastStatus(ACTION_LOCATION, "A2", source);} else {updateLCD("A2 dang trong", ""); broadcastStatus("error", "A2 dang trong", source);}}
                    else if (value == "B1") {if (daVaoB1) {dichuyenraB1(); daVaoB1 = false; sendSerialCommand("B1"); updateLCD("Da xuat:", "B1"); broadcastStatus(ACTION_LOCATION, "B1", source);} else {updateLCD("B1 dang trong", ""); broadcastStatus("error", "B1 dang trong", source);}}
                    else if (value == "B2") {if (daVaoB2) {dichuyenraB2(); daVaoB2 = false; sendSerialCommand("B2"); updateLCD("Da xuat:", "B2"); broadcastStatus(ACTION_LOCATION, "B2", source);} else {updateLCD("B2 dang trong", ""); broadcastStatus("error", "B2 dang trong", source);}}
                    else if (value == "C1") {if (daVaoC1) {dichuyenraC1(); daVaoC1 = false; sendSerialCommand("C1"); updateLCD("Da xuat:", "C1"); broadcastStatus(ACTION_LOCATION, "C1", source);} else {updateLCD("C1 dang trong", ""); broadcastStatus("error", "C1 dang trong", source);}}
                    else if (value == "C2") {if (daVaoC2) {dichuyenraC2(); daVaoC2 = false; sendSerialCommand("C2"); updateLCD("Da xuat:", "C2"); broadcastStatus(ACTION_LOCATION, "C2", source);} else {updateLCD("C2 dang trong", ""); broadcastStatus("error", "C2 dang trong", source);}}
                    else {updateLCD("Loi V.tri xuat", value); broadcastStatus("error", "Vi tri xuat kho khong hop le", source);}
                }
                else
                {
                    updateLCD("Chua chon che do", "Luu/Xuat kho");
                    broadcastStatus("error", "Chua chon che do luu/xuat kho", source);
                }
            }
            else
            {
                updateLCD("Loi:", "Thieu V.tri");
                broadcastStatus("error", "Thieu gia tri vi tri", source);
            }
        }
        else
        {
            updateLCD("Action khong ro", action);
            broadcastStatus("error", String("Unknown action in current mode: ") + action, source);
        }
    }
    else
    {
        updateLCD("He thong OFF", "An ON de bat");
        broadcastStatus("error", "System OFF. Press ON.", source);
    }
}

void checkPhysicalButtonWithoutDebounce(int buttonPin, int &lastButtonState, const char *actionToTrigger)
{
    int reading = digitalRead(buttonPin);
    if (reading == LOW && lastButtonState == HIGH)
    {
        delay(50); // Chờ một chút để bỏ qua nhiễu
        reading = digitalRead(buttonPin);
        if (reading == LOW) // Nếu vẫn đang nhấn
        {
            Serial.printf("Nut vat ly (pin %d) nhan! Kich hoat action: %s\n", buttonPin, actionToTrigger); // Debug
            executeAction(actionToTrigger, "", SOURCE_PHYSICAL);
            lastButtonState = LOW;
        }
    }
    else if (reading == HIGH && lastButtonState == LOW)
    {
        lastButtonState = HIGH;
    }
}

void setupPins()
{
    pinMode(LUU_KHO_PIN, OUTPUT);
    pinMode(XUAT_KHO_PIN, OUTPUT);
    digitalWrite(LUU_KHO_PIN, LOW);
    digitalWrite(XUAT_KHO_PIN, LOW);
    pinMode(NUT_ON_VATLY_PIN, INPUT_PULLUP);
    pinMode(NUT_OFF_VATLY_PIN, INPUT_PULLUP);
    pinMode(NUT_RESET_VATLY_PIN, INPUT_PULLUP);
    lastButtonStateON = digitalRead(NUT_ON_VATLY_PIN);
    lastButtonStateOFF = digitalRead(NUT_OFF_VATLY_PIN);
    lastButtonStateRESET = digitalRead(NUT_RESET_VATLY_PIN);
    Serial.println("GPIO pins configured."); // Debug
}

void setupLCD()
{
    lcd.init();
    lcd.backlight();
    updateLCD("Khoi dong...", "Xin cho");
    Serial.println("LCD initialized."); // Debug
}

void setupAP()
{
    Serial.println("Setting up WiFi Access Point..."); // Debug
    updateLCD("Tao AP Wifi...",AP_SSID);

    WiFi.mode(WIFI_AP);
    bool result = (strcmp(AP_PASSWORD, "") == 0) ? WiFi.softAP(AP_SSID) : WiFi.softAP(AP_SSID, AP_PASSWORD);
    if (result)
    {
        Serial.println("WiFi AP started successfully"); // Debug
        Serial.print("AP IP address: "); Serial.println(WiFi.softAPIP()); // Debug
        updateLCD("AP OK!", "IP:" + WiFi.softAPIP().toString().substring(0, 15));
    }
    else
    {
        Serial.println("Error setting up WiFi AP"); // Debug
        updateLCD("Loi tao AP!", "Khoi dong lai");
        delay(2000);
        ESP.restart();
    }
}

void setupWebServer()
{
    ws.onEvent(handleWebSocketEvent);
    server.addHandler(&ws);
    Serial.println("WebSocket server configured at /ws"); // Debug

    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
              { request->send_P(200, "text/html", trangHtml); });
    server.onNotFound([](AsyncWebServerRequest *request)
                      { request->send(404, "text/plain", "404 Not Found"); });
    server.begin();
    Serial.println("HTTP server started."); // Debug
}
